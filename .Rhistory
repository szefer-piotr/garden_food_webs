p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.2, lwd=1.5) +
geom_point()
library(lme4)
library(lmerTest)
vullme <- lmer(vul~trt+(1|block), data=genvuldf)
genlme <- lmer(gen~trt+(1|block), data=genvuldf)
summary(genlme)
summary(vullme)
p <- ggplot(genvuldf, aes(x = trt, y = gen))
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.2, lwd=1.5) +
geom_point()
summary(vullme)
p <- ggplot(genvuldf, aes(x = trt, y = vul))
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.2, lwd=1.5) +
geom_point()
library(lme4)
library(lmerTest)
vullme <- lmer(vul~trt+(1|block), data=genvuldf)
genlme <- lmer(gen~trt+(1|block), data=genvuldf)
summary(genlme)
summary(vullme)
insects <- read.table("datasets/arthropods_clean.txt")
treats  <- read.table("datasets/treatments_clean.txt")
plants  <- read.table("datasets/plants_clean.txt")
size_dat <-read.table("datasets/size_dat_bio.txt")
library("bipartite")
source("code/bio_log_ratio.R")
# Simple vulnerability and generality patterns in networks
gnames <- as.character(treats$codes)
genvuldf <- data.frame()
for(gname in gnames){
print(gname)
nlres <- networklevel(gardnets[[gname]], index = "vulnerability")
pdi <- mean(PDI(gardnets[[gname]]))
tt <- tryCatch(networklevel(gardnets[[gnames[gname]]], index = "vulnerability"),error=function(e) e, warning=function(w) w)
ifelse(is(tt,"warning"),next,"OK")
subgvdf <- data.frame(plot = gname, gen = nlres[1], vul = nlres[2], pdi = pdi)
genvuldf <- rbind(genvuldf, subgvdf)
}
rownames(treats) <- treats$codes
genvuldf$trt <- treats[genvuldf$plot, ]$treat
genvuldf$block <- substr(genvuldf$plot, 3,4)
# But generality would also change if the number of plant at the plot is smaller!
library(ggplot2)
p <- ggplot(genvuldf, aes(x = trt, y = vul))
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.2, lwd=1.5) +
geom_point()
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.1,
color = "grey60", lwd=1.5) +
geom_point()
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.1,
color = "grey60", lwd=1.5) +
geom_jitter()
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.1,
color = "grey60", lwd=1.5) +
geom_jitter(width = 0.1)
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.1,
color = "grey60", lwd=1.5) +
geom_jitter(width = 0.1) + theme_bw()
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.1,
color = "grey60", lwd=1.5) +
geom_jitter(width = 0.1) + theme_classic()
bw
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.1,
color = "grey60", lwd=1.5) +
geom_jitter(width = 0.1) + theme_bw()
genvuldf
gen <- genvuldf[,c("plot","gen","trt","block")]
vul <- genvuldf[,c("plot","vul","trt","block")]
pdi <- genvuldf[,c("plot","pdi","trt","block")]
pdi
# Simple vulnerability and generality patterns in networks
gnames <- as.character(treats$codes)
genvuldf <- data.frame()
for(gname in gnames){
print(gname)
nlres <- networklevel(gardnets[[gname]], index = "vulnerability")
pdi <- mean(PDI(gardnets[[gname]]))
con <-  networklevel(gardnets[[gname]], index = "connectance")
tt <- tryCatch(networklevel(gardnets[[gnames[gname]]], index = "vulnerability"),error=function(e) e, warning=function(w) w)
ifelse(is(tt,"warning"),next,"OK")
subgvdf <- data.frame(plot = gname, gen = nlres[1], vul = nlres[2], pdi = pdi)
genvuldf <- rbind(genvuldf, subgvdf)
}
warnings()
con <- genvuldf[,c("plot","con","trt","block")]
# Simple vulnerability and generality patterns in networks
gnames <- as.character(treats$codes)
genvuldf <- data.frame()
for(gname in gnames){
print(gname)
nlres <- networklevel(gardnets[[gname]], index = "vulnerability")
pdi <- mean(PDI(gardnets[[gname]]))
con <-  networklevel(gardnets[[gname]], index = "connectance")
tt <- tryCatch(networklevel(gardnets[[gnames[gname]]], index = "vulnerability"),error=function(e) e, warning=function(w) w)
ifelse(is(tt,"warning"),next,"OK")
subgvdf <- data.frame(plot = gname, gen = nlres[1], vul = nlres[2],
pdi = pdi, con = con)
genvuldf <- rbind(genvuldf, subgvdf)
}
rownames(treats) <- treats$codes
genvuldf$trt <- treats[genvuldf$plot, ]$treat
genvuldf$block <- substr(genvuldf$plot, 3,4)
# But generality would also change if the number of plant at the plot is smaller!
library(ggplot2)
gen <- genvuldf[,c("plot","gen","trt","block")]
vul <- genvuldf[,c("plot","vul","trt","block")]
pdi <- genvuldf[,c("plot","pdi","trt","block")]
con <- genvuldf[,c("plot","con","trt","block")]
con
gardnets[["w1g1p6"]]
gardnets[["w1g1p4"]]
# Community detection
source("code/contingencyTable.R")
source("code/bio_log_ratio.R")
source("code/weighted-modularity-LPAwbPLUS/code/R/LPA_wb_plus.R")
source("code/weighted-modularity-LPAwbPLUS/code/R/MODULARPLOT.R") #read in plotting function
# 1. Load datesets ----
insects <- read.table("datasets/arthropods_clean.txt")
treats  <- read.table("datasets/treatments_clean.txt")
plants  <- read.table("datasets/plants_clean.txt")
size_dat <-read.table("datasets/size_dat_bio.txt")
# From the bio log ratio
MAT <- subinsct
# Modularity plots - seems like
for (i in 1:36){
MAT <- gardnets[[i]]
if(dim(MAT)[1] == 1){next}
# MOD1 = LPA_wb_plus(MAT) # find labels and weighted modularity using LPAwb+
MOD2 = DIRT_LPA_wb_plus(MAT) # find labels and weighted modularity using DIRTLPAwb+
# MOD3 = DIRT_LPA_wb_plus(MAT>0, 2, 20)
patch <- paste("figs/", "gard", i, sep="")
pdf(patch, width = 5, height=5)
MODULARPLOT(MAT,MOD2)
dev.off()
# show the modular network configuration found in MOD1. Row and column numbering indicates the ordering of rows and columns in MAT. Modules are highlighted in red rectangles.
}
MAT <- gardnets[[32]]
# MAT <- subinsct
MOD1 = LPA_wb_plus(MAT) # find labels and weighted modularity using LPAwb+
MOD2 = DIRT_LPA_wb_plus(MAT) # find labels and weighted modularity using DIRTLPAwb+
MOD3 = DIRT_LPA_wb_plus(MAT>0, 2, 20)
# MODULARPLOT(MAT,MOD2) # show the modular network configuration found in MOD1. Row and column numbering indicates the ordering of rows and columns in MAT. Modules are highlighted in red rectangles.
#use with R library 'bipartite'
library("bipartite")
source("code/weighted-modularity-LPAwbPLUS/code/R/convert2moduleWeb.R") # read in conversion function
MOD1modWeb = convert2moduleWeb(MAT,MOD2) # converts the configuration found in MOD1 to a moduleWeb object
plotModuleWeb(MOD1modWeb) # plot the corresponding moduleWeb object using plotModuleWeb in library bipartite
source("code/weighted-modularity-LPAwbPLUS/code/R/GetModularInformation.R") #read in function for finding additional information
MOD1information = GetModularInformation(MAT,MOD2)
# normalised modularity score for configuration found by MOD1 for MAT
print(MOD1information$normalised_modularity)
# realized modularity score for configuration found by MOD1 for MAT
print(MOD1information$realized_modularity)
MOD1information = GetModularInformation(MAT,MOD2)
MOD1information
MAT
isp = ncol(MAT)
isp
substr(colnames(MAT),1,4)
substr(colnames(MAT),1,4) %in% c("aran", "mant")]
substr(colnames(MAT),1,4) %in% c("aran", "mant")
ispp = ncol(MAT[, substr(colnames(MAT),1,4) %in% c("aran", "mant")])
ispp
isph = ncol - ispp
isph = ncol(MAT) - ispp
isph
ncol(MAT)
# Simple vulnerability and generality patterns in networks
gnames <- as.character(treats$codes)
genvuldf <- data.frame()
for(gname in gnames){
print(gname)
MAT <- gardnets[[gname]]
nlres <- networklevel(MAT, index = "vulnerability")
pdi <- mean(PDI(MAT))
con <-  networklevel(MAT, index = "connectance")
mod1 = DIRT_LPA_wb_plus(MAT)
MODinformation = GetModularInformation(MAT,mod1)
mod = MODinformation$realized_modularity
ispp = ncol(MAT[, substr(colnames(MAT),1,4) %in% c("aran", "mant")])
isph = ncol(MAT) - ispp
tt <- tryCatch(networklevel(gardnets[[gnames[gname]]], index = "vulnerability"),error=function(e) e, warning=function(w) w)
ifelse(is(tt,"warning"),next,"OK")
subgvdf <- data.frame(plot = gname, gen = nlres[1], vul = nlres[2],
pdi = pdi, con = con, mod = mod, isph=isph,
ispp = ispp)
genvuldf <- rbind(genvuldf, subgvdf)
}
for(gname in gnames){
print(gname)
MAT <- gardnets[[gname]]
nlres <- networklevel(MAT, index = "vulnerability")
pdi <- mean(PDI(MAT))
con <-  networklevel(MAT, index = "connectance")
#mod1 = DIRT_LPA_wb_plus(MAT)
#MODinformation = GetModularInformation(MAT,mod1)
#mod = MODinformation$realized_modularity
#ispp = ncol(MAT[, substr(colnames(MAT),1,4) %in% c("aran", "mant")])
#isph = ncol(MAT) - ispp
tt <- tryCatch(networklevel(gardnets[[gnames[gname]]], index = "vulnerability"),error=function(e) e, warning=function(w) w)
ifelse(is(tt,"warning"),next,"OK")
subgvdf <- data.frame(plot = gname, gen = nlres[1], vul = nlres[2],
pdi = pdi, con = con, mod = mod, isph=isph,
ispp = ispp)
genvuldf <- rbind(genvuldf, subgvdf)
}
genvuldf <- data.frame()
# Simple vulnerability and generality patterns in networks
gnames <- as.character(treats$codes)
genvuldf <- data.frame()
for(gname in gnames){
print(gname)
MAT <- gardnets[[gname]]
nlres <- networklevel(MAT, index = "vulnerability")
pdi <- mean(PDI(MAT))
con <-  networklevel(MAT, index = "connectance")
#mod1 = DIRT_LPA_wb_plus(MAT)
#MODinformation = GetModularInformation(MAT,mod1)
mod = MODinformation$realized_modularity
ispp = ncol(MAT[, substr(colnames(MAT),1,4) %in% c("aran", "mant")])
isph = ncol(MAT) - ispp
tt <- tryCatch(networklevel(gardnets[[gnames[gname]]], index = "vulnerability"),error=function(e) e, warning=function(w) w)
ifelse(is(tt,"warning"),next,"OK")
subgvdf <- data.frame(plot = gname, gen = nlres[1], vul = nlres[2],
pdi = pdi, con = con, mod = mod, isph=isph,
ispp = ispp)
genvuldf <- rbind(genvuldf, subgvdf)
}
# Simple vulnerability and generality patterns in networks
gnames <- as.character(treats$codes)
genvuldf <- data.frame()
for(gname in gnames){
print(gname)
MAT <- gardnets[[gname]]
nlres <- networklevel(MAT, index = "vulnerability")
pdi <- mean(PDI(MAT))
con <-  networklevel(MAT, index = "connectance")
#mod1 = DIRT_LPA_wb_plus(MAT)
#MODinformation = GetModularInformation(MAT,mod1)
#mod = MODinformation$realized_modularity
ispp = ncol(MAT[, substr(colnames(MAT),1,4) %in% c("aran", "mant")])
isph = ncol(MAT) - ispp
tt <- tryCatch(networklevel(gardnets[[gnames[gname]]], index = "vulnerability"),error=function(e) e, warning=function(w) w)
ifelse(is(tt,"warning"),next,"OK")
subgvdf <- data.frame(plot = gname, gen = nlres[1], vul = nlres[2],
pdi = pdi, con = con, mod = mod, isph=isph,
ispp = ispp)
genvuldf <- rbind(genvuldf, subgvdf)
}
# Simple vulnerability and generality patterns in networks
gnames <- as.character(treats$codes)
genvuldf <- data.frame()
for(gname in gnames){
print(gname)
MAT <- gardnets[[gname]]
nlres <- networklevel(MAT, index = "vulnerability")
pdi <- mean(PDI(MAT))
con <-  networklevel(MAT, index = "connectance")
tt <- tryCatch(networklevel(gardnets[[gnames[gname]]], index = "vulnerability"),error=function(e) e, warning=function(w) w)
ifelse(is(tt,"warning"),next,"OK")
#mod1 = DIRT_LPA_wb_plus(MAT)
#MODinformation = GetModularInformation(MAT,mod1)
#mod = MODinformation$realized_modularity
ispp = ncol(MAT[, substr(colnames(MAT),1,4) %in% c("aran", "mant")])
isph = ncol(MAT) - ispp
subgvdf <- data.frame(plot = gname, gen = nlres[1], vul = nlres[2],
pdi = pdi, con = con, mod = mod, isph=isph,
ispp = ispp)
genvuldf <- rbind(genvuldf, subgvdf)
}
# Simple vulnerability and generality patterns in networks
gnames <- as.character(treats$codes)
genvuldf <- data.frame()
for(gname in gnames){
print(gname)
MAT <- gardnets[[gname]]
tt <- tryCatch(networklevel(gardnets[[gnames[gname]]], index = "vulnerability"),error=function(e) e, warning=function(w) w)
ifelse(is(tt,"warning"),next,"OK")
nlres <- networklevel(MAT, index = "vulnerability")
pdi <- mean(PDI(MAT))
con <-  networklevel(MAT, index = "connectance")
mod1 = DIRT_LPA_wb_plus(MAT)
MODinformation = GetModularInformation(MAT,mod1)
mod = MODinformation$realized_modularity
ispp = ncol(MAT[, substr(colnames(MAT),1,4) %in% c("aran", "mant")])
isph = ncol(MAT) - ispp
subgvdf <- data.frame(plot = gname, gen = nlres[1], vul = nlres[2],
pdi = pdi, con = con, mod = mod, isph=isph,
ispp = ispp)
genvuldf <- rbind(genvuldf, subgvdf)
}
MAT
gardnets[[gnames[gname]]]
gnames[gname]
# Simple vulnerability and generality patterns in networks
gnames <- as.character(treats$codes)
gname
gnames[gname]
MAT <- gardnets[[gname]]
MAT
tt <- tryCatch(networklevel(MAT, index = "vulnerability"),error=function(e) e, warning=function(w) w)
ifelse(is(tt,"warning"),next,"OK")
# Simple vulnerability and generality patterns in networks
gnames <- as.character(treats$codes)
genvuldf <- data.frame()
for(gname in gnames){
print(gname)
MAT <- gardnets[[gname]]
tt <- tryCatch(networklevel(MAT, index = "vulnerability"),error=function(e) e, warning=function(w) w)
ifelse(is(tt,"warning"),next,"OK")
nlres <- networklevel(MAT, index = "vulnerability")
pdi <- mean(PDI(MAT))
con <-  networklevel(MAT, index = "connectance")
mod1 = DIRT_LPA_wb_plus(MAT)
MODinformation = GetModularInformation(MAT,mod1)
mod = MODinformation$realized_modularity
ispp = ncol(MAT[, substr(colnames(MAT),1,4) %in% c("aran", "mant")])
isph = ncol(MAT) - ispp
subgvdf <- data.frame(plot = gname, gen = nlres[1], vul = nlres[2],
pdi = pdi, con = con, mod = mod, isph=isph,
ispp = ispp)
genvuldf <- rbind(genvuldf, subgvdf)
}
rownames(treats) <- treats$codes
genvuldf$trt <- treats[genvuldf$plot, ]$treat
genvuldf$block <- substr(genvuldf$plot, 3,4)
# But generality would also change if the number of plant at the plot is smaller!
library(ggplot2)
gen <- genvuldf[,c("plot","gen","trt","block")]
vul <- genvuldf[,c("plot","vul","trt","block")]
pdi <- genvuldf[,c("plot","pdi","trt","block")]
con <- genvuldf[,c("plot","con","trt","block")]
mod <- genvuldf[,c("plot","mod","trt","block")]
isp <- genvuldf[,c("plot","isp","trt","block")]
isph <- genvuldf[,c("plot","isph","trt","block")]
ispp <- genvuldf[,c("plot","ispp","trt","block")]
ispp
isph
plotdat <- rbind(gen, vul)
# Change names
colnames(gen, vul)
# Change names
colnames(gen) <- colnames(vul) <- colnames(pdi) <- colnames(con) <- colnames(mod) <- colnames(isph) <- colnames(ispp) <- c("plot","ind","trt","block")
rbind(gen, vul)
rbind(gen, vul, pdi, con, mod, isph, ispp)
dim(gen)
dim(vul)
dim(pdi)
dim(con)
dim(mod)
dim(isph)
dim(ispp)
plotdat <- rbind(gen, vul, pdi, con, mod, isph, ispp)
plotdat$type <- rep(c("Generality", "Vulnerability", "Specialization PDI", "Connectance",
"Modularity", "Herbivore Species",
"Predator Species"), each=33)
plotdat
p <- ggplot(plotdat, aes(x = trt, y = ind))
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.1,
color = "grey60", lwd=1.5) +
geom_jitter(width = 0.1) + theme_bw() +facet_wrap(type)
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.1,
color = "grey60", lwd=1.5) +
geom_jitter(width = 0.1) + theme_bw() +facet_wrap(plotdat$type)
plotdat$type
plotdat
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.1,
color = "grey60", lwd=1.5) +
geom_jitter(width = 0.1) + theme_bw() + facet_wrap(~type)
p + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="errorbar", width=0.1,
color = "grey60", lwd=1.5) +
geom_jitter(width = 0.1) +
theme_bw() +
facet_wrap(~type, scales="free")
# Tests!
for(type in unique(plotdat$type))
{print type}
print(type)
unique(plotdat$type)
# Tests!
for(type in unique(plotdat$type)){
print(type)
}
library("bipartite")
library(lme4)
library(lmerTest)
# Add plant species richness to the plotdat
sr <- as.data.frame(tapply(plants$SPEC, plants$CODE, function(x){length(unique(x))}))
sr
plotdat$plot
plotdat$sr <- sr[plotdat$plot,]
plotdat
# Tests!
for(type in unique(plotdat$type)){
print(type)
subdat <- plotdat[plotdat$type == type, ]
sublm <- lmer(vul~trt+sr+(1|block), data=subdat)
summary(sublm)
}
# Tests!
for(type in unique(plotdat$type)){
print(type)
subdat <- plotdat[plotdat$type == type, ]
sublm <- lmer(ind~trt+sr+(1|block), data=subdat)
summary(sublm)
}
print(summary(sublm))
# Tests!
for(type in unique(plotdat$type)){
print(type)
subdat <- plotdat[plotdat$type == type, ]
sublm <- lmer(ind~trt+sr+(1|block), data=subdat)
print(summary(sublm))
}
subdat <- plotdat[plotdat$type == type, ]
type
sublm <- lmer(ind~trt+sr+(1|block), data=subdat)
print(summary(sublm))
nms <- unique(plotdat$type)
type <- nms[1]
type
type <- nms[2]
nms[2]
nms[3]
nms[4]
type <- nms[4]
subdat <- plotdat[plotdat$type == type, ]
sublm <- lmer(ind~trt+sr+(1|block), data=subdat)
print(summary(sublm))
plot(subulm)
plot(sublm)
print(type)
nms <- unique(plotdat$type)
type <- nms[1]
print(type)
subdat <- plotdat[plotdat$type == type, ]
sublm <- lmer(ind~trt+sr+(1|block), data=subdat)
print(summary(sublm))
plot(sublm)
table(subdat)
table(subdat$block, subdat$trt)
subdat
table(treats$treat, treats$codes)
insects <- read.table("datasets/arthropods_clean.txt")
treats  <- read.table("datasets/treatments_clean.txt")
plants  <- read.table("datasets/plants_clean.txt")
size_dat <-read.table("datasets/size_dat_bio.txt")
library("bipartite")
source("code/bio_log_ratio.R")
gardnetsfam
# Example of the control - predator comparison
nc <- "w1g1p3"
np <- "w1g1p4"
netc <- gardnetsfam[[nc]]
netp <- gardnetsfam[[np]]
plntabudfc <- plants[(plants$CODE == nc), c("SP_CODE", "WEIGHT")]
plntabudfp <- plants[(plants$CODE == np), c("SP_CODE", "WEIGHT")]
plntabuc <- plntabudfc$WEIGHT
plntabup <- plntabudfp$WEIGHT
names(plntabuc) <- plntabudfc$SP_CODE
names(plntabup) <- plntabudfp$SP_CODE
par(mfrow=c(2,1))
plotweb(netc[, c("orth", "lepi","cole","hemi","homo")], low.abun = plntabuc)
plotweb(netp[, c("orth", "lepi","hemi","homo")], low.abun = plntabup)
x11(4,4)
plotweb(netc[, c("orth", "lepi","cole","hemi","homo")], low.abun = plntabuc)
plotweb(netp[, c("orth", "lepi","hemi","homo")], low.abun = plntabup)
x11(4,4)
par(mfrow=c(2,1))
plotweb(netc[, c("orth", "lepi","cole","hemi","homo")], low.abun = plntabuc)
plotweb(netp[, c("orth", "lepi","hemi","homo")], low.abun = plntabup)
# Seems like at least in the case of orthoptera majority of the interactions have shifted to a different resource
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
colc <- rep(cbPalette[4], length(colnames(netc)))
colc[!(colnames(netc) %in% c("orth", "lepi","cole","hemi","homo"))] <- cbPalette[7]
colp <- rep(cbPalette[4], length(colnames(netp)))
colp[!(colnames(netp) %in% c("orth", "lepi","hemi","homo"))] <- cbPalette[7]
plotweb(netc, low.abun = plntabuc, col.high = colc)
plotweb(netp, low.abun = plntabup, col.high = colp)
x11(6,6)
par(mfrow=c(2,1))
plotweb(netc, low.abun = plntabuc, col.high = colc)
plotweb(netp, low.abun = plntabup, col.high = colp)
nc <- "w1g6p6"
np <- "w1g6p2"
netc <- gardnetsfam[[nc]]
netp <- gardnetsfam[[np]]
plntabudfc <- plants[(plants$CODE == nc), c("SP_CODE", "WEIGHT")]
plntabudfp <- plants[(plants$CODE == np), c("SP_CODE", "WEIGHT")]
plntabuc <- plntabudfc$WEIGHT
plntabup <- plntabudfp$WEIGHT
names(plntabuc) <- plntabudfc$SP_CODE
names(plntabup) <- plntabudfp$SP_CODE
x11(6,6)
par(mfrow=c(2,1))
plotweb(netc[, colnames(netc) %in% c("orth", "lepi","cole","hemi","homo")], low.abun = plntabuc)
plotweb(netp[, colnames(netp) %in% c("orth", "lepi","cole","hemi","homo")], low.abun = plntabup)
