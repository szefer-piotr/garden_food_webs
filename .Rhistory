}
# Correlation plot
# library(psych)
# pairs.panels(generallr[,c(2,4)],
#              method = "pearson", # correlation method
#              hist.col = "#00AFBB",
#              density = TRUE,  # show density plots
#              ellipses = FALSE # show correlation ellipses
with(generallr, plot(H,P, pch=19, cex=1.5))
abline(h=0)
abline(v=0)
abline(0,1, lty =2)
abline(0, -1, lty = 2)
generallr <- generallr[,c("bl","H","P")]
colnames(generallr) <- c("bl",
paste(family, "H", sep=""),
paste(family, "Pl", sep=""))
return(generallr)
}
fam <- herbfams[2]
print(fam)
colelr <- lratioFam(herbfams[1])
hemilr <- lratioFam(herbfams[2])
homolr <- lratioFam(herbfams[3])
lepilr <- lratioFam(herbfams[4])
orthlr <- lratioFam(herbfams[5])
par(mfrow=c(3,2))
colelr <- lratioFam(herbfams[1])
par(mfrow=c(2,3))
colelr <- lratioFam(herbfams[1])
hemilr <- lratioFam(herbfams[2])
homolr <- lratioFam(herbfams[3])
lepilr <- lratioFam(herbfams[4])
orthlr <- lratioFam(herbfams[5])
#family <- herbfams[1]
lratioFam <-function(family){
genllratio <- data.frame()
fambiollcp <- biollcp[biollcp$nms == family, ]
for (block in unique(fambiollcp$gard)){
subbl <- fambiollcp[fambiollcp$gard == block, ]
# for individual block
for(plt in unique(subbl$plot)){
# Values for control
print(plt)
subplot <- subbl[subbl$plot == plt, ]
crow <- data.frame(bl = block,
pt = plt,
trt = unique(subplot$trt),
bioH= NA,
bioIP= NA,
bioPp = NA)
# for each plant evaluate H, IP and P and then sum them together
biovec <- c(0,0,0)
for (plant in unique(subplot$plnm)){
#print(plant)
subplant <- subplot[subplot$plnm == plant,]
ip <- sum(subplant[subplant$nms %in% c("aran","mant"), ]$bio)
h <- sum(subplant[!(subplant$nms %in% c("aran","mant")), ]$bio)
p <- subplant$plbio[1]
#print(c(h,ip,p))
biovec <- biovec + c(h,ip,p)
}
crow$bioH <- biovec[1]
crow$bioIP <- biovec[2]
crow$bioPp <- biovec[3]
genllratio <- rbind(genllratio,
crow)
}
}
genllratio
# Evaluate the log ratios: CONTROL/PREDATOR
generallr <- data.frame()
for(block in unique(genllratio$bl)){
sbl <- genllratio[genllratio$bl == block,]
ctrlplot <- sbl[sbl$trt == "CONTROL",]
predplot <- sbl[sbl$trt == "PREDATOR",]
ctrlvals <- ctrlplot[, c("bioH","bioIP","bioPp")]
predvals <- predplot[, c("bioH","bioIP","bioPp")]
if(dim(predvals)[1] == 0 | dim(ctrlvals)[1] == 0){
print(paste("No insects from this family in block",block))
llratiorow <- data.frame(bl = block,
H = NA,
IP = NA,
P = NA)
}else{
llratiovals <- log(ctrlvals/predvals)
llratiorow <- data.frame(bl = block,
H = llratiovals$bioH,
IP = llratiovals$bioIP,
P = llratiovals$bioPp)
}
generallr <- rbind(generallr, llratiorow)
}
# Correlation plot
# library(psych)
# pairs.panels(generallr[,c(2,4)],
#              method = "pearson", # correlation method
#              hist.col = "#00AFBB",
#              density = TRUE,  # show density plots
#              ellipses = FALSE # show correlation ellipses
with(generallr, plot(H,P, pch=19, cex=1.5,main=family))
abline(h=0)
abline(v=0)
abline(0,1, lty =2)
abline(0, -1, lty = 2)
generallr <- generallr[,c("bl","H","P")]
colnames(generallr) <- c("bl",
paste(family, "H", sep=""),
paste(family, "Pl", sep=""))
return(generallr)
}
fam <- herbfams[2]
print(fam)
par(mfrow=c(2,3))
colelr <- lratioFam(herbfams[1])
hemilr <- lratioFam(herbfams[2])
homolr <- lratioFam(herbfams[3])
lepilr <- lratioFam(herbfams[4])
orthlr <- lratioFam(herbfams[5])
insects <- read.table("datasets/arthropods_clean.txt")
treats  <- read.table("datasets/treatments_clean.txt")
plants  <- read.table("datasets/plants_clean.txt")
size_dat <-read.table("datasets/size_dat_bio.txt")
library("bipartite")
source("code/bio_log_ratio.R")
gardnetsfam
# Example of the control - predator comparison for garden 1
nc <- "w1g1p3"
np <- "w1g1p4"
netc <- gardnetsfam[[nc]]
netp <- gardnetsfam[[np]]
plntabudfc <- plants[(plants$CODE == nc), c("SP_CODE", "WEIGHT")]
plntabudfp <- plants[(plants$CODE == np), c("SP_CODE", "WEIGHT")]
plntabuc <- plntabudfc$WEIGHT
plntabup <- plntabudfp$WEIGHT
names(plntabuc) <- plntabudfc$SP_CODE
names(plntabup) <- plntabudfp$SP_CODE
par(mfrow=c(2,1))
plotweb(netc[, c("orth", "lepi","cole","hemi","homo")], low.abun = plntabuc)
plotweb(netp[, c("orth", "lepi","hemi","homo")], low.abun = plntabup)
par(mfrow=c(1,1))
plotweb(netc[, c("orth", "lepi","cole","hemi","homo")], low.abun = plntabuc)
plotweb(netp[, c("orth", "lepi","hemi","homo")], low.abun = plntabup)
treats
gardnetsfam
plntabudfc
plntabudfp
plntabuc <- plntabudfc$WEIGHT
plntabuc
plotweb(netc[, c("orth", "lepi","cole","hemi","homo")],
low.abun = plntabuc, main="Control")
?plotweb
plotweb(netc[, c("orth", "lepi","cole","hemi","homo")],
low.abun = plntabuc, title="Control")
plotweb(netc[, c("orth", "lepi","cole","hemi","homo")],
low.abun = plntabuc, main="Control")
plotweb2(netc[, c("orth", "lepi","cole","hemi","homo")],
low.abun = plntabuc, main="Control")
plotweb2(netc[, c("orth", "lepi","cole","hemi","homo")],
low.abun = plntabuc, main="Control")
plotweb(netp[, c("orth", "lepi","hemi","homo")],
low.abun = plntabup, title="Predator")
plotweb2(netc[, c("orth", "lepi","cole","hemi","homo")],
low.abun = plntabuc)
par(mfrow=c(1,1))
plotweb2(netc[, c("orth", "lepi","cole","hemi","homo")],
low.abun = plntabuc)
insects <- read.table("datasets/arthropods_clean.txt")
treats  <- read.table("datasets/treatments_clean.txt")
plants  <- read.table("datasets/plants_clean.txt")
size_dat <-read.table("datasets/size_dat_bio.txt")
gardnetsfam
# Example of the control - predator comparison for garden 1
nc <- "w1g1p3" #control
np <- "w1g1p4" #predator
netc <- gardnetsfam[[nc]]
netp <- gardnetsfam[[np]]
plntabudfc <- plants[(plants$CODE == nc), c("SP_CODE", "WEIGHT")]
plntabudfp <- plants[(plants$CODE == np), c("SP_CODE", "WEIGHT")]
plntabuc <- plntabudfc$WEIGHT
plntabup <- plntabudfp$WEIGHT
names(plntabuc) <- plntabudfc$SP_CODE
names(plntabup) <- plntabudfp$SP_CODE
par(mfrow=c(1,1))
plotweb2(netc[, c("orth", "lepi","cole","hemi","homo")],
low.abun = plntabuc)
plotweb(netp[, c("orth", "lepi","hemi","homo")],
low.abun = plntabup)
plotweb(netc[, c("orth", "lepi","cole","hemi","homo")],
low.abun = plntabuc)
plotweb(netp[, c("orth", "lepi","hemi","homo")],
low.abun = plntabup)
gardnetsfam
subinsct
gardnets
gardnetsorig <- gardnest
gardnetsorig <- gardnets
gardnets  <- gardnetsfam
gardnets
# Analysis below should be performed only for C,  I, P plots.
# par(mfrow = c(3,12))
# Modularity plots - seems like
for (i in 1:36){
MAT <- gardnets[[i]]
if(dim(MAT)[1] == 1){next}
# MOD1 = LPA_wb_plus(MAT) # find labels and weighted modularity using LPAwb+
MOD2 = DIRT_LPA_wb_plus(MAT) # find labels and weighted modularity using DIRTLPAwb+
# MOD3 = DIRT_LPA_wb_plus(MAT>0, 2, 20)
patch <- paste("figs/", "gard", i, sep="")
tiff(patch)
MODULARPLOT(MAT,MOD2)
dev.off()
# show the modular network configuration found in MOD1. Row and column numbering indicates the ordering of rows and columns in MAT. Modules are highlighted in red rectangles.
}
?MODULARPLOT
MODULARPLOT
MAT
gardnets
gardnets[[i]]
gardnets[[1]]
names(gardnets)
gardnets
MAT <- gardnets[[i]]
if(dim(MAT)[1] == 1){next}
# MOD1 = LPA_wb_plus(MAT) # find labels and weighted modularity using LPAwb+
MOD2 = DIRT_LPA_wb_plus(MAT) # find labels and weighted modularity using DIRTLPAwb+
MOD2
MODULARPLOT(MAT,MOD2)
?MODULARPLOT
??MODULARPLOT
MOD2
MOD2$Col_labels
colnames(MAT)[MOD2$Col_labels]
plotweb(MAT)
MAT
MODULARPLOT
MOD2
MODULARPLOT(MAT,MOD2, xlab = )
MODULARPLOT(MAT,MOD2)
mplt <- MODULARPLOT(MAT,MOD2)
mplt
names(MODULARPLOT(MAT,MOD2))
MODULARPLPOT
OUT <- MOD2
ROW_IX <- order(OUT$Row_labels)
ROW_IX
COL_IX <- order(OUT$Col_labels)
COL_IX
ROWS <- OUT$Row_labels[ROW_IX]
ROWS
COLS
COLS <- OUT$Col_labels[COL_IX]
COLS
MODULARPLOT <- function(MATRIX,OUT) {
#MATRIX:  original bipartite network
#OUT: output from modularity algorithm containing row and column module labels
#1. Sort original network, so that rows are positioned according to modules
ROW_IX <- order(OUT$Row_labels)
COL_IX <- order(OUT$Col_labels)
ROWS <- OUT$Row_labels[ROW_IX]
COLS <- OUT$Col_labels[COL_IX]
MODS <- unique(ROWS)
#2. Plot this network
MATRIXPLOT(MATRIX[ROW_IX,COL_IX], MAT[,COL_IX], MAT[ROW_IX,])
#Add the modular boundaries using output information - drawing from top left to bottom right
xcurr<-0.5
ycurr<-length(ROWS)+0.5
for(aa in 1:length(MODS)) {
Rsize <- sum(ROWS==MODS[aa]) #Number of rows in this module
Csize <- sum(COLS==MODS[aa]) #Number of columns in this module
rect(xcurr,ycurr,xcurr+Csize,ycurr-Rsize,border='red')
xcurr <- xcurr+Csize
ycurr <- ycurr-Rsize
}
}
MODULARPLOT(MAT,MOD2)
# Give original names to
colIX <- colnames(MAT)[COL_IX]
rowIX <- rownames(MAT)[ROW_IX]
colIX
rowIX
MODULARPLOT <- function(MATRIX,OUT) {
#MATRIX:  original bipartite network
#OUT: output from modularity algorithm containing row and column module labels
#1. Sort original network, so that rows are positioned according to modules
ROW_IX <- order(OUT$Row_labels)
COL_IX <- order(OUT$Col_labels)
ROWS <- OUT$Row_labels[ROW_IX]
COLS <- OUT$Col_labels[COL_IX]
MODS <- unique(ROWS)
# Give original names to
colIX <- colnames(MAT)[COL_IX]
rowIX <- rownames(MAT)[ROW_IX]
#2. Plot this network
MATRIXPLOT(MATRIX[ROW_IX,COL_IX], colIX, rowIX)
#Add the modular boundaries using output information - drawing from top left to bottom right
xcurr<-0.5
ycurr<-length(ROWS)+0.5
for(aa in 1:length(MODS)) {
Rsize <- sum(ROWS==MODS[aa]) #Number of rows in this module
Csize <- sum(COLS==MODS[aa]) #Number of columns in this module
rect(xcurr,ycurr,xcurr+Csize,ycurr-Rsize,border='red')
xcurr <- xcurr+Csize
ycurr <- ycurr-Rsize
}
}
MODULARPLOT(MAT,MOD2)
# Analysis below should be performed only for C,  I, P plots.
# par(mfrow = c(3,12))
# Modularity plots - seems like
for (i in 1:36){
MAT <- gardnets[[i]]
if(dim(MAT)[1] == 1){next}
# MOD1 = LPA_wb_plus(MAT) # find labels and weighted modularity using LPAwb+
MOD2 = DIRT_LPA_wb_plus(MAT) # find labels and weighted modularity using DIRTLPAwb+
# MOD3 = DIRT_LPA_wb_plus(MAT>0, 2, 20)
patch <- paste("figs/", "gard", i, sep="")
tiff(patch)
MODULARPLOT(MAT,MOD2)
dev.off()
# show the modular network configuration found in MOD1. Row and column numbering indicates the ordering of rows and columns in MAT. Modules are highlighted in red rectangles.
}
plotweb(MAT)
MAT <- gardnets[[32]]
plotweb(MAT)
MOD2 = DIRT_LPA_wb_plus(MAT) # find labels and weighted modularity using DIRTLPAwb+
MODULARPLOT(MAT,MOD2)
MOD2
# Highlight modules
plotweb(MAT)
# Highlight modules
unique(MOD2$Col_labels)
# Highlight modules
mod <- unique(MOD2$Col_labels)[1]
mod
rownames(MAT)
which(MOD2$Row_labels == mod)
modrows <- rownames(MAT)[which(MOD2$Row_labels == mod)]
modrows
MODULARPLOT(MAT,MOD2)
modcols <- colnames(MAT)[which(MOD2$Col_labels == mod)]
modcols
modrows
modcols
library(RColorBrewer)
length(mod)
library(RColorBrewer)
mod <- unique(MOD2$Col_labels)
brewer.pal(length(mod))
RColorBrewer::brewer.pal.info
brewer.pal(length(mod),BrBG)
brewer.pal(length(mod),"BrBG")
colors <- brewer.pal(length(mod),"BrBG")
plot(colors)
plot(c(1,1,1,1),colors)
barplot(c(1,1,1,1),colors)
barplot()
?barplot
barplot(1,colors)
barplot(c(1,1,1,1),col = colors)
RColorBrewer::brewer.pal.info
colors <- brewer.pal(length(mod),"Pastel1")
barplot(c(1,1,1,1),col = colors)
colors <- brewer.pal(length(mod),"PiYG")
barplot(c(1,1,1,1),col = colors)
colors <- brewer.pal(length(mod),"BrBG")
barplot(c(1,1,1,1),col = colors)
modrows <- rownames(MAT)[which(MOD2$Row_labels == mod[1])]
modcols <- colnames(MAT)[which(MOD2$Col_labels == mod[1])]
dim(MAT)[2]
upperCol <- c(rep("black", dim(MAT)[2]))
upperCol
modcols
upperCol[colnames(MAT) %in% modcols]
upperCol[colnames(MAT) %in% modcols]  <- colors[1]
upperCol
plotweb(MAT, col.high = upperCol)
plotweb(MAT, col.high = upperCol, bor.col.high = upperCol)
lowerCol <- c(rep("black", dim(MAT)[1]))
upperCol[rownames(MAT) %in% modrows]  <- colors[1]
upperCol <- c(rep("black", dim(MAT)[2]))
lowerCol <- c(rep("black", dim(MAT)[1]))
# Find out which are in different modules and color them
modrows <- rownames(MAT)[which(MOD2$Row_labels == mod[1])]
modcols <- colnames(MAT)[which(MOD2$Col_labels == mod[1])]
upperCol[colnames(MAT) %in% modcols]  <- colors[1]
lowerCol[rownames(MAT) %in% modrows]  <- colors[1]
plotweb(MAT,
col.high = upperCol, bor.col.high = upperCol,
col.low = lowerCol, bor.col.low = lowerCol)
upperCol <- c(rep("black", dim(MAT)[2]))
lowerCol <- c(rep("black", dim(MAT)[1]))
i = 2
# Find out which are in different modules and color them
modrows <- rownames(MAT)[which(MOD2$Row_labels == mod[i])]
modcols <- colnames(MAT)[which(MOD2$Col_labels == mod[i])]
upperCol[colnames(MAT) %in% modcols]  <- colors[1]
lowerCol[rownames(MAT) %in% modrows]  <- colors[1]
plotweb(MAT,
col.high = upperCol, bor.col.high = upperCol,
col.low = lowerCol, bor.col.low = lowerCol)
i = 3
# Find out which are in different modules and color them
modrows <- rownames(MAT)[which(MOD2$Row_labels == mod[i])]
modcols <- colnames(MAT)[which(MOD2$Col_labels == mod[i])]
upperCol[colnames(MAT) %in% modcols]  <- colors[1]
lowerCol[rownames(MAT) %in% modrows]  <- colors[1]
plotweb(MAT,
col.high = upperCol, bor.col.high = upperCol,
col.low = lowerCol, bor.col.low = lowerCol)
upperCol <- c(rep("black", dim(MAT)[2]))
lowerCol <- c(rep("black", dim(MAT)[1]))
i = 3
# Find out which are in different modules and color them
modrows <- rownames(MAT)[which(MOD2$Row_labels == mod[i])]
modcols <- colnames(MAT)[which(MOD2$Col_labels == mod[i])]
upperCol[colnames(MAT) %in% modcols]  <- colors[1]
lowerCol[rownames(MAT) %in% modrows]  <- colors[1]
plotweb(MAT,
col.high = upperCol, bor.col.high = upperCol,
col.low = lowerCol, bor.col.low = lowerCol)
MOD2 = LPA_wb_plus(MAT)
MOD2
MODULARPLOT(MAT,MOD2)
MOD2 = DIRT_LPA_wb_plus(MAT) # find labels and weighted modularity using
MODULARPLOT(MAT,MOD2)
MOD2
# MOD2 = LPA_wb_plus(MAT)
MODULARPLOT(MAT,MOD2)
library(RColorBrewer)
mod <- unique(MOD2$Col_labels)
colors <- brewer.pal(length(mod),"BrBG")
barplot(c(1,1,1,1),col = colors)
colors
mod
upperCol <- c(rep("black", dim(MAT)[2]))
lowerCol <- c(rep("black", dim(MAT)[1]))
upperCol
lowerCol
i = 3
# Find out which are in different modules and color them
modrows <- rownames(MAT)[which(MOD2$Row_labels == mod[i])]
modrows
modcols <- colnames(MAT)[which(MOD2$Col_labels == mod[i])]
modcols
upperCol[colnames(MAT) %in% modcols]  <- colors[1]
lowerCol[rownames(MAT) %in% modrows]  <- colors[1]
plotweb(MAT,
col.high = upperCol, bor.col.high = upperCol,
col.low = lowerCol, bor.col.low = lowerCol)
i = 1
# Find out which are in different modules and color them
modrows <- rownames(MAT)[which(MOD2$Row_labels == mod[i])]
modcols <- colnames(MAT)[which(MOD2$Col_labels == mod[i])]
upperCol[colnames(MAT) %in% modcols]  <- colors[1]
lowerCol[rownames(MAT) %in% modrows]  <- colors[1]
plotweb(MAT,
col.high = upperCol, bor.col.high = upperCol,
col.low = lowerCol, bor.col.low = lowerCol)
upperCol <- c(rep("black", dim(MAT)[2]))
lowerCol <- c(rep("black", dim(MAT)[1]))
i = 2
# Find out which are in different modules and color them
modrows <- rownames(MAT)[which(MOD2$Row_labels == mod[i])]
modcols <- colnames(MAT)[which(MOD2$Col_labels == mod[i])]
upperCol[colnames(MAT) %in% modcols]  <- colors[1]
lowerCol[rownames(MAT) %in% modrows]  <- colors[1]
plotweb(MAT,
col.high = upperCol, bor.col.high = upperCol,
col.low = lowerCol, bor.col.low = lowerCol)
MOD2 = DIRT_LPA_wb_plus(MAT>0, 2, 20)
MOD2
# MOD2 = LPA_wb_plus(MAT)
MODULARPLOT(MAT,MOD2)
MOD2 = DIRT_LPA_wb_plus(MAT>0, 2, 40)
# MOD2 = LPA_wb_plus(MAT)
MODULARPLOT(MAT,MOD2)
MOD2 = DIRT_LPA_wb_plus(MAT>0, 2, 10)
# MOD2 = LPA_wb_plus(MAT)
MODULARPLOT(MAT,MOD2)
MOD2 = DIRT_LPA_wb_plus(MAT, 2, 10)
# MOD2 = LPA_wb_plus(MAT)
MODULARPLOT(MAT,MOD2)
MOD2 = DIRT_LPA_wb_plus(MAT, 4, 10)
# MOD2 = LPA_wb_plus(MAT)
MODULARPLOT(MAT,MOD2)
MOD2 = DIRT_LPA_wb_plus(MAT, 5, 10)
?DIRT_LPA_wb_plus
MOD2 = DIRT_LPA_wb_plus(MAT, 5, 100)
# MOD2 = LPA_wb_plus(MAT)
MODULARPLOT(MAT,MOD2)
MOD2 = DIRT_LPA_wb_plus(MAT, 10, 100)
# MOD2 = LPA_wb_plus(MAT)
MODULARPLOT(MAT,MOD2)
MOD2 = DIRT_LPA_wb_plus(MAT, 2, 100)
# MOD2 = LPA_wb_plus(MAT)
MODULARPLOT(MAT,MOD2)
MOD2 = DIRT_LPA_wb_plus(MAT, 1, 100)
# MOD2 = LPA_wb_plus(MAT)
MODULARPLOT(MAT,MOD2)
MOD2 = DIRT_LPA_wb_plus(MAT, 4, 1000)
# MOD2 = LPA_wb_plus(MAT)
MODULARPLOT(MAT,MOD2)
MOD2 = DIRT_LPA_wb_plus(MAT)
MOD2 = LPA_wb_plus(MAT)
MODULARPLOT(MAT,MOD2)
pciplots <- treats
treats
pciplots <- treats[treats$treat %in% c("CONTROL",
"PREDATOR",
"INSECTICIDE"), ]$codes
pciplots
